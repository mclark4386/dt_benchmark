package actions

import (
	"cpsg-git.mattclark.guru/highlands/dt_benchmark/helpers"
	"cpsg-git.mattclark.guru/highlands/dt_benchmark/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Campus)
// DB Table: Plural (campuses)
// Resource: Plural (Campuses)
// Path: Plural (/campuses)
// View Template Folder: Plural (/templates/campuses/)

// CampusesResource is the resource for the Campus model
type CampusesResource struct {
	buffalo.Resource
}

// List gets all Campus. This function is mapped to the path
// GET /campuses
func (v CampusesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	campuses := &models.Campuses{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Campus from the DB
	if err := q.All(campuses); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, campuses))
}

// Show gets the data for one Campus. This function is mapped to
// the path GET /campuses/{campus_id}
func (v CampusesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campus
	campus := &models.Campus{}

	// To find the Campus the parameter campus_id is used.
	if err := tx.Find(campus, c.Param("campus_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, campus))
}

// New renders the form for creating a new Campus.
// This function is mapped to the path GET /campuses/new
func (v CampusesResource) New(c buffalo.Context) error {
	if helpers.IsSuperAdminOrRedirect(c) != nil {
		return nil
	}
	return c.Render(200, r.Auto(c, &models.Campus{}))
}

// Create adds a Campus to the DB. This function is mapped to the
// path POST /campuses
func (v CampusesResource) Create(c buffalo.Context) error {
	if helpers.IsSuperAdminOrRedirect(c) != nil {
		return nil
	}
	// Allocate an empty Campus
	campus := &models.Campus{}

	// Bind campus to the html form elements
	if err := c.Bind(campus); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(campus)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, campus))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Campus was created successfully")

	// and redirect to the campuses index page
	return c.Render(201, r.Auto(c, campus))
}

// Edit renders a edit form for a Campus. This function is
// mapped to the path GET /campuses/{campus_id}/edit
func (v CampusesResource) Edit(c buffalo.Context) error {
	if helpers.IsSuperAdminOrRedirect(c) != nil {
		return nil
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campus
	campus := &models.Campus{}

	if err := tx.Find(campus, c.Param("campus_id")); err != nil {
		return c.Error(404, err)
	}

	campus_admins := []string{}
	for _, admin := range campus.Admins {
		campus_admins = append(campus_admins, admin.ID.String())
	}
	c.Set("campus_admins", campus_admins)

	return c.Render(200, r.Auto(c, campus))
}

// Update changes a Campus in the DB. This function is mapped to
// the path PUT /campuses/{campus_id}
func (v CampusesResource) Update(c buffalo.Context) error {
	if helpers.IsSuperAdminOrRedirect(c) != nil {
		return nil
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campus
	campus := &models.Campus{}

	if err := tx.Find(campus, c.Param("campus_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Campus to the html form elements
	if err := c.Bind(campus); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(campus)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, campus))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Campus was updated successfully")

	// and redirect to the campuses index page
	return c.Render(200, r.Auto(c, campus))
}

// Destroy deletes a Campus from the DB. This function is mapped
// to the path DELETE /campuses/{campus_id}
func (v CampusesResource) Destroy(c buffalo.Context) error {
	if helpers.IsSuperAdminOrRedirect(c) != nil {
		return nil
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Campus
	campus := &models.Campus{}

	// To find the Campus the parameter campus_id is used.
	if err := tx.Find(campus, c.Param("campus_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(campus); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Campus was destroyed successfully")

	// Redirect to the campuses index page
	return c.Render(200, r.Auto(c, campus))
}
